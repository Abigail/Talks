#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';

use lib '/Users/abigail/Perl/CPAN/Chess-Infinite/lib';
use lib '/Users/abigail/Perl/CPAN/Colour-Name/lib';

use JSON;
use List::Util 'max';

use Chess::Infinite;

my $info;

my $silver_general_limits = {
    max_bounding_box  =>  100,
    max_moves         => 2500,
};

#
# Put some limits on the paths generated
#
my %piece_limits = (
    knight                  =>  {},
    king                    =>  {max_bounding_box  =>  20},
    queen                   =>  {no_run            =>   1},
    rook                    =>  {no_run            =>   1},
    pawn                    =>  {max_bounding_box  =>  13},
    bishop                  =>  {max_bounding_box  =>  70},

    amazon                  =>  {no_run            =>   1},
    chancellor              =>  {no_run            =>   1},
    centaur                 =>  {no_run            =>   1},
    dragonhorse             =>  {no_run            =>   1},
    dragonking              =>  {no_run            =>   1},
    archbishop              =>  {},

    gold_general            =>  {no_run            =>   1},
    lance                   =>  {no_run            =>   1},
    shogiknight             =>  {no_run            =>   1},
    silver_general          =>  $silver_general_limits,
   'silver_general:east'    =>  $silver_general_limits,
   'silver_general:south'   =>  $silver_general_limits,
   'silver_general:west'    =>  $silver_general_limits,

    horse                   =>  {},

);

#
# We want the movements sorted by the following rules:
#    - jumps first
#    - slides last
# and as secondary ordering:
#    - clockwise, starting from 12 o'clock
#
sub sort_rides (@rides) {
    #
    # First calculate the quadrant the movement is in:
    #    -  Quadrant 1:  x >= 0, y <= 0
    #    -  Quadrant 2:  x >= 0, y >= 0
    #    -  Quadrant 3:  x <= 0, y >= 0
    #    -  Quadrant 4:  x <= 0, y <= 0
    #
    # and the cosine of the angle: x / | v |,
    # where | v | = sqrt (x^2 + y^2).
    #
    # For quadrants 1 and 4, we store cos, otherwise, we store - cos.
    # Quadrants 1 and 4 are the ones where y <= 0.
    #

    my $X        =  0;
    my $Y        =  1;
    my $STEPS    =  2;
    my $QUADRANT = -2;
    my $COS      = -1;

    my @temp = map {
        my $x_pos = $$_ [$X] >= 0;
        my $y_pos = $$_ [$Y] >= 0;
        my $quadrant =  $x_pos && !$y_pos ? 1
                      : $x_pos &&  $y_pos ? 2
                      :!$x_pos &&  $y_pos ? 3
                      :!$x_pos && !$y_pos ? 4
                      : die "Huh?";
        my $cos = $$_ [$X] / sqrt ($$_ [$X] ** 2 + $$_ [$Y] ** 2);

        [@$_, $quadrant, $y_pos ? - $cos : $cos];
    } @rides;

    @temp = sort {
       ($$a [$STEPS] || 9999) <=> ($$b [$STEPS] || 9999) ||
        $$a [$QUADRANT]       <=>  $$b [$QUADRANT]       ||
        $$a [$COS]            <=>  $$b [$COS]
    } @temp;

    map {splice @$_, -2; $_} @temp;
}




foreach my $name (keys %piece_limits) {
    my %args;
    my $piece_name = $name;
    if ($name =~ /:/p) {
        $args {heading} = ${^POSTMATCH};
        $piece_name     = ${^PREMATCH};
    }
    my $piece  = piece $piece_name, %args;
    my @rides  = sort_rides $piece -> rides;
    my $limits = $piece_limits {$name};

    my $piece_info;
    my $image_name = $name =~ s/:/_/gr;
    $$piece_info {image}  =  $image_name . ".svg";
    foreach my $ride (@rides) {
        if (@$ride > 3) {
            my @info    = splice @$ride, 3;
            push @$ride => {@info};
        }
        if ($$ride [3] {free_path}) {
            #
            # Calculate the trace the move is taking
            #
            my ($dx, $dy) = @{$ride} [0, 1];
            my $max_away = max abs ($dx), abs ($dy);
            my @pass_through;
            my ($px, $py) = (0, 0);
            foreach my $step (1 .. ($max_away - 1)) {
                my $nx = int ($step * $dx / $max_away);
                my $ny = int ($step * $dy / $max_away);
                push @pass_through => [$nx - $px, $ny - $py];
                ($px, $py) = ($nx, $ny);
            }
            $$ride [3] {pass_through} = \@pass_through;
        }
    }
    $$piece_info {moves}  = \@rides;

    unless ($$limits {no_run}) {
        #
        # Run the piece, and record its movement list
        #
        $piece -> run (
            max_bounding_box   =>  $$limits {max_bounding_box},
            max_moves          =>  $$limits {max_moves},
        );

        $$piece_info {run_list}     =  $piece -> value_list;
        $$piece_info {bounding_box} =  $piece -> bounding_box;
        $$piece_info {trapped}      =  $piece -> trapped ? 1 : 0;
    }

    $$info {$name} = $piece_info;
}

my $json = encode_json $info;


open my $fh, ">", "JavaScript/chess_pieces_generated.js" or die "open: $!";
my $text = << "--";
//
// This is a generated file. Do not modify.
//
var chess_pieces = $json;
--
say $fh $text;

__END__
