#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';
use Cwd;
use Text::Markdown 'markdown';

use experimental 'signatures';

sub init_templates;
sub process_file;

my $Talks_Dir = $ENV {HOME} . "/Talks";

@ARGV = ("Trapped-Knights");

my $presentation;
if (@ARGV) {
    $presentation = shift;
}
else {
    my $dir = getcwd;
    if ($dir =~ m [$Talks_Dir/([^/]+)/]) {
        $presentation = $1;
    }
}
if (!$presentation || !-d "$Talks_Dir/$presentation") {
    die "Failed to find presentation";
}

my $main_dir = "$Talks_Dir/$presentation";

chdir $main_dir or die "chdir $main_dir";


my $src_dir  = "$main_dir/Src";
my $dest_dir = "$main_dir/HTML";
my $js_dir   = "$main_dir/JavaScript";

my $index = "$src_dir/index";
open my $fh_index, "<", $index;
my @files = <$fh_index>;
chomp (@files);

my $templates = init_templates;

for (my $i = 0; $i < @files; $i ++) {
    my $prev = $i == 0          ? "" : $files [$i - 1];
    my $file =                         $files [$i];
    my $next = $i == @files - 1 ? "" : $files [$i + 1];

    process_file ($prev, $file, $next);
}

exit;

sub init_templates {
    my $out;
    foreach my $dir ($Talks_Dir, $main_dir) {
        my $t_dir = "$dir/Templates";
        next unless -d $t_dir;
        opendir my $dh, $t_dir or die "opendir $t_dir: $!";
        foreach my $file (readdir $dh) {
            next unless $file =~ /(.*)\.tmpl$/;
            my $template = $1;
            local $/;
            open my $fh, "<", "$t_dir/$file" or die "open $t_dir/$file: $!";
            $$out {$template} .= <$fh>;
        }
    }
    $out;
}

sub read_file ($file) {
    #
    # Return the content of a file if it exists, an empty string otherwise.
    #
    return "" unless -f $file;
    open my $fh, "<", $file or die "open $file: $!";
    local $/;
    my $text = <$fh>;
    close $fh or die "close $file: $!";

    $text;
}


sub prep_template ($name, %options) {
    my $text = $$templates {$name} or return "";

    my $next = $options {next};
    my $prev = $options {prev};

    #
    # Fill in the __NEXT__ and __PREV__ tokens; 
    #
    $text =~ s/__NEXT__/$next ? qq ["next": "$next.html",] : ""/e;
    $text =~ s/__PREV__/$prev ? qq ["prev": "$prev.html",] : ""/e;

    $text;
}


sub process_directives ($text = "", %options) {
    #
    # #% JS: module
    #        Links to the named JavaScript module (from ../JavaScript).
    #
    $text =~ s [^\#% \s* Template: \s* (\N+) \n]
               [prep_template $1, %options]gemx;

    # #% Template: module
    #        Includes the named templace.
    #
    $text =~ s [^\#% \s* JS: \s* (\S+) \s* \n]
               [<script src = "../Javascript/$1.js"></script>]gmx;

    $text;
}


sub process_file ($prev, $file, $next) {
    my %options = (
        next => $next,
        prev => $prev,
    );

    my $js_file = "$js_dir/$file.js";

    my $text = read_file ("$src_dir/$file.mkdn");

    $text = process_directives $text, %options;

    my $html = markdown ($text);

    my $preamble = prep_template default => %options;

    if (-f $js_file) {
        $preamble .= "<script src = '../JavaScript/$file.js'></script>\n";
    }

    open my $fh_out, ">", "$dest_dir/$file.html"
                or die "open $dest_dir/$file.html: $!";

    print $fh_out $_ || "" for $preamble, $html;

    close $fh_out or die "close $dest_dir/$file.html: $!";
}



__END__
